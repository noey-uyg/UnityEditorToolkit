using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace noeyToolkit
{

    public class AutoGenerateCreatePrefabCode
    {
        private static readonly string outputFolder = Path.Combine(Application.dataPath, "Editor/PrefabGenerationTool");
        private static readonly string outputFile = Path.Combine(outputFolder, "Createprefab.cs");

        // CreatePrefab.cs 파일 자동 생성 후 각 프리팹에 맞는 메뉴 항목 등록
        [MenuItem("Assets/RefreshPrefabs")]
        public static void RefeshPrefab()
        {
            if(!Directory.Exists(outputFolder))
                Directory.CreateDirectory(outputFolder);

            string scriptCode = $@"
using UnityEngine;
using UnityEditor;

public class CreatePrefab
{{
    public static void CreatePrefabs(string assetRelativePath)
    {{
        GameObject prefab = AssetDatabase.LoadAssetAtPath<GameObject>(assetRelativePath);

        if (prefab != null)
        {{
            var instance = PrefabUtility.InstantiatePrefab(prefab) as GameObject;

            if (Selection.activeTransform != null)
            {{
                instance.transform.SetParent(Selection.activeTransform, false);
            }}

            EditorGUIUtility.PingObject(instance);
            Undo.RegisterCreatedObjectUndo(instance, ""Create "" + instance.name);
        }}
        else
        {{
            Debug.LogError(""No Prefab : "" + assetRelativePath);
        }}
    }}

    //Create
{GetAutoGeneratedCode()}
}}";

            File.WriteAllText(outputFile, scriptCode.Trim());
            AssetDatabase.Refresh();
        }

        // 현재 프로젝트 내 모든 프리팹 경로 기반 자동 생성 코드 반환
        public static string GetAutoGeneratedCode()
        {
            StringBuilder sb = new StringBuilder();
            string[] prefabPaths = Directory.GetFiles(Application.dataPath, "*.prefab", SearchOption.AllDirectories);
            var prefabDictionary = new Dictionary<string, int>(); // 중복 이름 처리용

            foreach (string fullPath in prefabPaths)
            {
                string cleanPath = fullPath.Replace("\\", "/");
                string assetRelativePath = "Assets" + cleanPath.Replace(Application.dataPath, "");
                string fileName = Path.GetFileNameWithoutExtension(assetRelativePath);

                // 특수기호 및 공백을 안전한 문자로 변환
                string safeFileName = MakeSafeForMenu(fileName);

                // 폴더 경로 가져오기
                string folderPath = Path.GetDirectoryName(assetRelativePath)?.Replace("\\", "/") ?? "";
                string[] pathParts = folderPath.Split('/');

                string menuName = string.Join("/", pathParts.Skip(1));

                if (!string.IsNullOrEmpty(menuName) && !menuName.EndsWith("/"))
                {
                    menuName += "/";
                }

                // 중복된 이름 처리
                if (prefabDictionary.ContainsKey(safeFileName))
                {
                    prefabDictionary[safeFileName]++;
                    safeFileName += $"_{prefabDictionary[safeFileName]}";  // 중복된 이름에 숫자 추가
                }
                else
                {
                    prefabDictionary[safeFileName] = 0;
                }

                string methodName = "Create_" + safeFileName.Replace(" ", "_");
                sb.AppendLine($@"   [MenuItem(""GameObject/Prefabs/{menuName}{safeFileName}"", false, 1)]");
                sb.AppendLine($@"   public static void {methodName}() => CreatePrefabs(""{assetRelativePath}"");");
            }

            return sb.ToString();
        }

        // 메뉴 항목 이름에 사용할 수 없는 특수기호를 처리하는 함수
        private static string MakeSafeForMenu(string fileName)
        {
            // 특수기호를 _로 변환 (예: 공백, #, %, *, 등)
            string safeName = fileName;
            char[] invalidChars = Path.GetInvalidFileNameChars();

            foreach (var ch in invalidChars)
            {
                safeName = safeName.Replace(ch, '_');
            }

            // 공백을 _로 대체
            safeName = safeName.Replace(" ", "_");

            return safeName;
        }
    }
}